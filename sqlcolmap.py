import re
import sqlite3 
#Chatgpt contributed code to extract column names for mapping fron a select statement
#also really just replicated logic honestly.
# which i had to modify half of for it to work,

def extract_column_names(select_statement, aliasspecific = False):
    """
    Extracts a list of column names from a given SQL SELECT statement.

    Parameters:
        select_statement (str): The SQL SELECT statement to analyze.

    Returns:
        list: A list of column names extracted from the statement.
    """
    # Remove any subqueries or nested SELECT statements
    clean_statement = re.sub(r'\(SELECT.*?\)', '', select_statement, flags=re.IGNORECASE | re.DOTALL)

    # Extract the portion of the statement between SELECT and FROM
    match = re.search(r'SELECT\s+(.*?)\s+FROM', clean_statement, flags=re.IGNORECASE | re.DOTALL)
    if not match:
        raise ValueError("Invalid SELECT statement")

    columns_part = match.group(1)

    # Split columns by comma and clean up whitespace
    columns = [col.strip() for col in columns_part.split(',')]

    # Remove aliases and functions to get column names only
    column_names = []

    for col in columns:
        # Handle cases with aliases (e.g., `column AS alias`)
        col = col.replace('\t',' ').replace('\n',' ').strip().replace('"','')
        searchstr =  col.lower()

        if not aliasspecific:
            lr = col.split('.')

            if len(lr) > 1:
                col = lr[1]
        
        asindex = -1

        try:
            asindex = searchstr.index(' as ')
        except ValueError:
            asindex = -1

        if asindex > -1:
            if len(col) > asindex+1:
                # copy to the end of the string after 'as' to get the column name
                col = col[asindex+4:]

        searchstr  =col.lower()

        dotindex = -1

        try:
            dotindex = searchstr.index('.')
        except ValueError:
            dotindex = -1

        if dotindex > -1:
            if len(col) > dotindex+1:
                col = col [dotindex+1:]

        col = col.replace('[','').replace(']','')

        column_names.append(col)

    return column_names

def mapData(cols:list, data:list[list]):
    """
    Maps the data of a select statement result generated by sqlite3.Cursor to a list of column names
    in the same order as those in the select statement.

    Args:
        cols (list[str]): list of columns generated by extract_column_names
        data (list[list]): a series of rows returned by the select statement

    Returns:
        list[dict[str,Any]]: a list of row data objects mapped against the columns names
    """
    results =[]

    for row in data:
        
        colptr = 0
        result = {}

        for col in cols:
            result[col] = row[colptr]
            colptr = colptr+1
        
        results.append(result)

    return results

def getOneSqlMapCursor(cur:sqlite3.Cursor, sql:str):
    result  = cur.fetchone()

    if result is None:
        return None
    
    cols = extract_column_names(sql)

    l= mapData(cols,[result])

    return l[0]


def getOneSqlMap(rconn:sqlite3.Connection, sql:str, params:tuple=None):
    params = () if params is None else params
    
    cursor = rconn.execute(sql,params)
    cols = extract_column_names(sql)

    results = cursor.fetchone()

    cursor.close()

    if results is None:
        return None

    l= mapData(cols,[results])

    return l[0]

def getSqlMap(rconn:sqlite3.Connection, sql:str, params:tuple|dict=None):
    
    # todo expand this to have a limit or skip 
    
    params = () if params is None else params
    
    cursor = rconn.execute(sql,params)
    cols = extract_column_names(sql)

    results = cursor.fetchall()

    cursor.close()

    return mapData(cols,results)



# Example usage
if __name__ == "__main__":
    query = "SELECT id, name AS username, MAX(salary) AS max_salary, department.id AS dept_id FROM employees"
    column_list = extract_column_names(query)
    print("Extracted Column Names:", column_list)

    results = [ [1,'john',85000,21], [2,'john',200000,22]]

    print (mapData(column_list,results))

    query = "SELECT  [as], g.id, k.dept_name, count(*) as Numbercount, max(jorgia) as maxjorgia from mytable"
    column_list = extract_column_names(query)
    print("Extracted Column Names:", column_list)
    
    results = [ [1,1,'Engineering', 2,200], [1,2,'Marketing',3,400]]
    
    print (mapData(column_list, results))
